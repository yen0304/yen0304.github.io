<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringBoot學習筆記 on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/categories/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link>
    <description>Recent content in SpringBoot學習筆記 on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 23 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/categories/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Freemarker &#43; Spring Security 整合</title>
      <link>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</guid>
      <description>Freemarker + Spring Security 整合 由於方便往後的實戰學習，在學會了快速的在Spring Boot 使用Freemarker在localhost:8080上執行之後，也學會了用Spring Security 控制訪問權限，在整合他們途中，其實遇到了不少配置上的問題，但也成功解決了，所以決定記錄這些解決問題的過程，也更了解了Spring Security的認證寫法。
pom.xml maven配置 Spring Security （先不要加上spring Security，因為加上去了所有為配置的默認都會受到全縣控管）
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Freemarker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Application.properties配置 Freemaker設定 #Freemaker設定spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/# 靜態資源訪問路徑spring.mvc.static-path-pattern=/static/**# 獲取根目錄路徑spring.freemarker.request-context-attribute=request開始撰寫程式部分 這部分的先後順序很重要，因為如果Freemarker其中有錯誤，css或js會跑不出來，也同樣的Spring Security如果有錯誤，css或js也會因爲訪問權限而跑不出來，所以在撰寫時順序如下
撰寫順序  確認Freemarker配置成功，包含get請求，以及靜態資源css js訪問成功 使用Spring Security下，得知靜態支援有受到保護，並請把保護關閉。 使用Spring security測試相關功能。  Freemaker靜態配置至測試成功 檔案存放位置 檔案存放位置很重要，也跟application.properties很相關，包含了靜態資源的訪問路徑，
這次規劃了user_login.ftl、login.css、login.js為登入Spring Security角色頁面
，login_success、login_success.css為登入成功登入之後跳轉的頁面
 ftl、css、js檔案存放配置 
Ftl(html)存取css、js之重點 在login_success下，存取css、js的html語法為下
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/login.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;/static/js/login.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 重點就是因為我們已經配置好了路徑，所以會因Freemarker會有不同的寫法
Controller層 應該沒什麼好解釋的
@Controller public class Controller { @GetMapping(&amp;#34;/user_login&amp;#34;) public String loginpage(Model model) { return &amp;#34;/user_login&amp;#34;; } @GetMapping(&amp;#34;/login_success&amp;#34;) public String successpage(Model model) { return &amp;#34;/login_success&amp;#34;; } } 如何判斷測試成功 運行SpringBoot之後，以下圖解是我們看到的畫面，使用瀏覽器是chrome</description>
    </item>
    
    <item>
      <title>Spring Boot 管理會員資料（二）-CRUD之RUD操作</title>
      <link>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%BA%8C-crud%E4%B9%8Brud%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%BA%8C-crud%E4%B9%8Brud%E6%93%8D%E4%BD%9C/</guid>
      <description>本文章涉及的知識  Springboot 、 Spring MVC HTTP method RESTful API JDBC mySQL語法 Html、css（小部分） Javascript 、Jquery、vue（小部分）  上一次的進度 [Spring Boot 管理會員資料（一）-會員創建](https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA/#%E8%B3%87%E6%96%99%E5%BA%AB%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A-%E4%BD%BF%E7%94%A8jdbc)
上次的進度用到了CRUD操作中的Create,創建了會員資料，這次就做完剩下的Read、Update、Delete功能，所以HTTP method以及RESTful API的部分請參照上一章節
為了閱讀方便，附上一些本章節會使用到的資訊
Member Class:
public class Member { Integer id; @NotBlank String name; @NotBlank String account; @NotBlank String password; //Getter&amp;amp;Setter  } 本章節Dao Interface、Service Dao＆Implement Dao public interface MemberDao { //返回值 依據名稱對應資料庫動作（參數類型 參數名稱）  String CreatMember(Member member); List&amp;lt;Member&amp;gt; ReadMember(); List&amp;lt;Member&amp;gt; ReadByAccount(String membersAccount); String UpdateByAccount(String membersAccount,Member member); String DeleteByAccount(String membersAccount); } Service public interface MemberService { String CreatMember(Member member); List&amp;lt;Member&amp;gt; ReadMember(); List&amp;lt;Member&amp;gt; ReadByAccount(String membersAccount); String DeleteByAccount(String membersAccount); String UpdateByAccount(String membersAccount,Member member); } ServiceImpl @Component public class MemberServiceImpl implements MemberService{ @Autowired//使用InterFace 發揮spring Ioc特性  private MemberDao memberDao; @Override public String CreatMember(Member member) { return memberDao.</description>
    </item>
    
    <item>
      <title>Spring Boot 管理會員資料（一）-會員創建 CRUD-Create</title>
      <link>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA-crud-create/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA-crud-create/</guid>
      <description>本文章涉及的知識  Springboot 、 Spring MVC HTTP method RESTful API JDBC mySQL語法 Html、css（小部分） Javascript 、Jquery（小部分）  複習HTPP method-GET or POST 差別 GET 或 POST 的差別最大的差別在於傳遞的參數會被看見，因為參數會放在url裡面。
POST的話參數會放在request body裡面，request body裡面通常會用Json格式來進行前後端的溝通
在Spring Boot裡面，使用@RequestBody取得放在request body的參數
練習設計RESTful API RESTful API三大原則： 1.使用http method表示動作
   HTTP Method 對應資料動作     POST Create（新增）   GET Read（查詢）   PUT Update（修改）   DELETE Delete（刪除）    2.url路徑表示資源階層關係
3.response body返回json或是xml格式
設計本範例RESTful API 設計會員資料之class public class Member { Integer id; String name; String account; String password; //getter &amp;amp; setter }    Method Url 資料庫 意義     POST /members Create（新增） 創建會員   GET /members/abc123 Read（查詢） 查詢會員帳號為abc123的資料   PUT /members/abc123 Update（修改） 修改會員帳號為abc123的資料   DELETE /members/abc123 Delete（刪除） 刪除會員帳號為abc123的資料    驗證請求參數 @NotBlank 為了讓使用者的登入數值不能為空白，避免後端程式發生錯誤，可以用此方法提前一部將錯誤回報給前端。</description>
    </item>
    
    <item>
      <title>Spingboot&#43;Freemarker基本配置</title>
      <link>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 Springboot + Freemaker 基本設置 前端複習的差不多了，所以來試試如何將後端數據傳到前，在google的幫助下，瞭解了要用搜尋關鍵字Springboot + Freemaker，Freemaker 跟thymeleaf是差不多功能的東西，雖然Springboot官方是推薦使用thymeleaf，但網路上比較上是Freemaker勝出，且在設定上好像較容易，所以就使用Freemaker作為模板引擎了
在網路上的資源很多，從官方到個人網站都有教學，大同小異，但是到了最後連結上還是出了小問題，幸好最終解決了，所以在這紀錄一下架設過程，希望大家需要時能按圖施工保證成功！！
環境介紹 開發平台：IntelliJ 2020.3
Springboot版本：2.3.7.release
前端：html、css、皆快速使用bootstrap
1.maven添加Freemaker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.檔案路徑&amp;amp;Freemaker環境配置 接下來檔案路徑就很重要了，
步驟1.
將自己index.html檔案放在resources/templates裡面，步驟是將檔案拉進去resources/templates後，intellij會詢問檔案名稱，這時候把副檔名改成ftl
接著要修改模板預設參數，在application.properties裡打上以下程式碼
spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/步驟2.
css、js檔案放在resources/static底下，切記，**一定要在static下新增css以及js資料夾！**否則會無法成功取得（我就是在這邊卡很久）。
3.測試用程式碼 接著新增controller,並使用getmapping
如下：
@Controller public class Logincontroller { @GetMapping(&amp;#34;/page&amp;#34;) public String show(Model model) { model.addAttribute(&amp;#34;name&amp;#34;,&amp;#34;測試&amp;#34;); return &amp;#34;/index&amp;#34;; } } 這邊要注意的地方是，
return &amp;#34;/index&amp;#34;; return的值就是ftl的檔案名稱
接著到index.ftl到隨便一個地方 加入 ${name} 來測試
我的長這樣：
&amp;lt;label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;remember-me&amp;#34;/&amp;gt; ${name} &amp;lt;/label&amp;gt; 4.檔案結構＆成果 這邊附上完整的檔案路徑配置
 
運行成果：</description>
    </item>
    
  </channel>
</rss>
