<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringBoot單元測試 on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/springboot%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</link>
    <description>Recent content in SpringBoot單元測試 on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/springboot%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot學習筆記-單元測試(3)-Controller層、Dao層、Service層的測試方式，MockMvc使用詳解 </title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A63-controller%E5%B1%A4dao%E5%B1%A4service%E5%B1%A4%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%96%B9%E5%BC%8Fmockmvc%E4%BD%BF%E7%94%A8%E8%A9%B3%E8%A7%A3/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A63-controller%E5%B1%A4dao%E5%B1%A4service%E5%B1%A4%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%96%B9%E5%BC%8Fmockmvc%E4%BD%BF%E7%94%A8%E8%A9%B3%E8%A7%A3/</guid>
      <description>SpringBoot學習筆記-單元測試(3)-Controller層、Dao層、Service層的測試方式，MockMvc使用詳解 Dao層以及Service層的測試方式 使用JUnit5測試SpringBoot程式 @SpringBootTest註解  只要在測試用的class上面加上@SpringBootTest，就會在單元測試時啟動Spring容器，也會創建Bean出來 這個@SpringBootTest的註解的功能非常完善，除了創建Bean之外，@Configuration或是攔截器Interceptor都會被生效，也就是等同於運行SpringBoot程式。 通常會把測試用的class變成public，  做好了準備之後可以運行看看成效以及顯示的結果為何：
@SpringBootTest public class StudentDaoImplTest { //注入bean  @Autowired private StudentDao studentDao; @Test public void getById(){ Student student = studentDao.getById(1); assertNotNull(student); assertEquals(&amp;#34;Amy&amp;#34;,student.getName()); } } 運行成果：
 
@Transactional註解 假設今天我們透過@Test想測試deleteById的方法時，實際上是會去真實刪除資料庫裡面的數據的，所以如果先執行了測試deleteById，在執行測試getById，這時候如果Id是一樣的情況下，就會影響到測試結果，雖然可以透過測試不同的Id來避免此情況，但在越複雜的專案時此方法很不適合，所以我們可以透過加上@Transactional註解，在單元測試結束之後，SpringBoot會去rollback（回滾）這個單元測試裡面所有的資料庫操作。
使用範例：
@Transactional @Test public void deleteById(){ studentDao.deleteById(1); Student student =studentDao.getById(1); assertNull(student); } 不同的@Transactional註解 @Transactional在不同的資料夾下，有不同的差異，
   資料夾 @Transactional公用     main資料夾 程式運行中發生錯誤才進行rollback   test資料夾 單元測試結束之後，強制執行rollback    Controller層的測試 Controller層的測試目的在於，要模擬前端呼叫真實API CAll的行為，看API是否能運行正確，並且不能透過注入Bean的方式來測試，意思就是模擬http request</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(4)-使用Mockito來減少單元測試中的Bean依賴</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A64-%E4%BD%BF%E7%94%A8mockito%E4%BE%86%E6%B8%9B%E5%B0%91%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%AD%E7%9A%84bean%E4%BE%9D%E8%B3%B4/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A64-%E4%BD%BF%E7%94%A8mockito%E4%BE%86%E6%B8%9B%E5%B0%91%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%AD%E7%9A%84bean%E4%BE%9D%E8%B3%B4/</guid>
      <description>SpringBoot學習筆記-單元測試(4)-Mockito 前言 部分文章內容來自於古老師在hahow的課程，還有古老師的部落格，想要做筆記的原因是因為，邊記變做會比較容易記住，改天忘了也可以用自己的方式去理解。
Mock測試目的與特性 單元測試的特性為下：
1.可以被自動化運行
2.各個單元測試互相獨立，彼此之間不能有依賴關係
3.測試結果穩定，不受外部服務影響
在前面的筆記，如果要測試Service層的話，應該會這樣寫：
@SpringBootTest public class StudentServiceImplMockTest { @Autowired StudentService studentService; @Test public void getById(){ Student student=studentService.getById(3); assertNotNull(student); assertEquals(3,student.getId()); assertEquals(&amp;#34;Judy&amp;#34;,student.getName()); } } 在上面的測試單元裡，StudentService其實用到了StudentDao這個Bean，
並不符合地２點，Bean之前在上面是有依賴關係的，所以Mock測試的
 目的：避免測試某一個單元測試，而去建構整個bean的依賴。 作法：創造一個假的bean，替換掉容器原有的bean。  在程式裡面Mock的意思為「假的」的意思，而非英文單字模仿。
Mockito Mockito是Spring Boot中，進行Mock測試的工具
功能大致上分為：
 模擬方法的返回值 模擬拋出Exception 記錄方法的使用次數、順序  @MockBean @Test public void getById(){ //第二步  Student mockStudent = new Student(); mockStudent.setId(100); mockStudent.setName(&amp;#34;mockname&amp;#34;); //這句話的意思就是，當有人使用studentDao.getById(3)時，固定return mockStudent這個object  Mockito.when(studentDao.getById(3)).thenReturn(mockStudent); Student student=studentService.getById(3); assertNotNull(student); assertEquals(3,student.getId()); assertEquals(&amp;#34;Judy&amp;#34;,student.getName()); } 執行結果：
org.opentest4j.AssertionFailedError: Expected :3 Actual :100 再把</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(2)-JUnit5使用教學</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A62-junit5%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A62-junit5%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</guid>
      <description>SpringBoot學習筆記-單元測試(2)-JUnit JUnit介紹 何謂JUnit?  jUnit是java單元測試的必備工具 只要在方法上加入@Test，即可生成一個單元測試  JUnit與Spring Boot的關係   Spring Boot &amp;lt;=2.1
只能使用JUnit4
  Spring Boot 2.2 2.3
可以使用JUnit4、JUint5。
  Spring boot &amp;gt;=2.4
只能使用JUnit5
  所以綜合上述，現階段會以Junit5作為主流，其中需要注意的是，Spring Boot如果在2.2以及2.3版本中，需要到pom.xml加上額外設定才能禁用JUint4。
在Spring Boot 2.2版本或2.3版本禁用JUnit4 如果需要在Spring Boot 2.2版本或2.3版本禁用JUnit4在pom.xml中，我們的程式碼其中有關測試單元的大致上會長這樣：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 我們只需新增下面這幾段程式碼即可禁用JUnit4，上面那段程式碼會變成這樣：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; Junt5的用法 Junit5的用法 以圖片說明：
 
其中第三點看起來簡單，但正是最精華的所在處，因為如果要讓團隊或是別人看懂這個方法的作用，命名正是我們最重要的工作。
JUnit5 Assert 下面用表格來說明Assert斷言用法的主要用途
   Assert系列用法 用途     assertNull(A) 斷言A為Null   assertNotNull(A) 斷言A不為Null   assertEquals(A,B) 斷言A與B相等   assertTure(A) 斷言A為True   assertFalse(A) 斷言A為False   assertThrows(exception,method) 斷言執行method的時候，會噴出exception    JUnit其他常用註解 @BeforceEach @BeforceEach：在每次@Test開始之前，「都會」執行一次</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(1)-基礎介紹</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A61-%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A61-%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9/</guid>
      <description>SpringBoot學習筆記-單元測試(1) 在學了SpringBoot中，不少的核心知識CRUD操作，接下來要學習的是該如何去測試我們撰寫好的功能
何謂單元測試（Unit Testing）？ 目的：自動化測試程式的正確性
所謂的單元測試，就是一次只測試一個功能點，一個單元可以是一個method，或是一個API
單元測試的特性＆注意事項 單元測試的特性 1.可以被自動化運行
2.各個單元測試互相獨立，彼此之間不能有依賴關係
3.測試結果穩定，不受外部服務影響
單元測試的注意事項 1.測試的程式要放在test資料夾裡面
2.測試的class名稱以「原class的名字加上Test做為結尾」來命名
3.測試的class的package要跟原class的package保持一致
環境部署&amp;amp;基礎範例  環境部署 如果想要在springboot裡面使用單元測試功能，要在pom.xml裏面新增這個maven，不過這段程式碼在一般創建springboot程式中就會加上去了
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  開始測試 先在demo的package底下新增一個簡易的計算機class Calcultor ，
首先如果我們一般在進行撰寫時，程式大概會長這樣：
public class Calcultor { public int add(int x,int y){ return(x+y); } public static void main(String[] args) { Calcultor calcultor =new Calcultor(); int result = calcultor.add(1,2); System.out.println(&amp;#34;結果為&amp;#34; + result); } } 結果會理所當然的出現結果為3，但假設今天某個工程師在add方法裡寫錯了，就必須花時間去尋找add方法裡是否有錯誤，所以我們這時候就要去利用單元測試去完成自動化測試。
首先在Calcultor 裡面點擊右鍵，選擇Generate-&amp;gt;Test ，Testing Library選擇JUnit5 如下圖：
 
接著就可以看到在Test底下的demo Package看到CalculatorTest這個Class，我們用以下程式碼來完成第一個測試的程式：</description>
    </item>
    
  </channel>
</rss>
