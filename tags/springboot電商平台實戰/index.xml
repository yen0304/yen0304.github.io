<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpringBoot電商平台實戰 on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B0/</link>
    <description>Recent content in SpringBoot電商平台實戰 on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 09 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot電商平台實戰(2)，商品詳情、熱門商品排序</title>
      <link>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B02%E5%95%86%E5%93%81%E8%A9%B3%E6%83%85%E7%86%B1%E9%96%80%E5%95%86%E5%93%81%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B02%E5%95%86%E5%93%81%E8%A9%B3%E6%83%85%E7%86%B1%E9%96%80%E5%95%86%E5%93%81%E6%8E%92%E5%BA%8F/</guid>
      <description>SpringBoot電商平台實戰(2) 前言 本章承SpringBoot電商平台實戰(1)的專案，所以配置、工具等等都一樣。
在實作商品有關的MVC時，其實沒有遇到什麼困難，畢竟東西熟悉了，也不用去用到session或是驗證等等，時間花最久的應該是在前端的javascript吧！因為本身沒有在做太多的研究，所以就依照兩年前學的也把它做完了，那些東西看了程式碼應該都知道，所以有興趣的可以至github下載，這章節就不做太多的介紹了。
免跨域註解@CrossOrigin的另一個方法 之後看到網路上的連接，得知不用加上@CrossOrigin(origins = &amp;ldquo;*&amp;quot;)
可以參考本連結，也是透過設置webconfiguration的方式
程式碼：
@Configuration public class CORSConfig { @Bean public WebMvcConfigurer corsConfigurer() { return new WebMvcConfigurerAdapter() { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&amp;#34;/**&amp;#34;) .allowedHeaders(&amp;#34;*&amp;#34;) .allowedMethods(&amp;#34;*&amp;#34;) .allowedOrigins(&amp;#34;*&amp;#34;); } }; } } 所以maven中也可以省去了
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 規劃資料庫中的商品數據 資料表創建相關數據：
CREATETABLEt_product(idINTAUTO_INCREMENTPRIMARYKEY,categoryIdINT(20)DEFAULTNULLCOMMENT&amp;#39;商品分類id&amp;#39;,typeCHAR(100)DEFAULTNULLCOMMENT&amp;#39;商品類別&amp;#39;,titleCHAR(60)DEFAULTNULLCOMMENT&amp;#39;商品標題（名稱）&amp;#39;,priceINT(20)COMMENT&amp;#39;單價&amp;#39;,numINT(20)COMMENT&amp;#39;數量&amp;#39;,imagepathVARCHAR(100)COMMENT&amp;#39;圖片路徑&amp;#39;,priorityINT(10)DEFAULTNULLCOMMENT&amp;#39;顯示優先程度&amp;#39;,statusINT(1)DEFAULT1COMMENT&amp;#39;上架狀態1是0否&amp;#39;,created_userVARCHAR(20)COMMENT&amp;#39;創建人&amp;#39;,created_timeDATETIMECOMMENT&amp;#39;創建時間&amp;#39;,modified_userVARCHAR(20)COMMENT&amp;#39;最後修改人&amp;#39;,modified_timeDATETIMECOMMENT&amp;#39;最后修改時間&amp;#39;)Product Class 接下來創建Product這個類別，當然繼承了BaseEntity
@Data public class Product extends BaseEntity implements Serializable { private Integer id; private Integer categoryId; private String type; private String title; private Integer price; private Integer num; private String imagepath; private Integer status; private Integer priority; } ProductRowMapper public class ProductRowMapper implements RowMapper&amp;lt;Product&amp;gt; { @Override public Product mapRow(ResultSet resultSet, int i) throws SQLException { Product product=new Product(); //後面result.</description>
    </item>
    
    <item>
      <title>SpringBoot電商平台實戰(1)，用戶註冊、用戶登入、修改資料</title>
      <link>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</guid>
      <description>SpringBoot電商平台實戰(1) 前言 在練習的差不多之後，決定實作一個完整的電商平台「SpringBoot電商平台實戰」，也參考了不少網路上的資源，主要是參考CSDN上的雨醉東風（由於不知能不能引用所以有興趣可以自行查詢）來撰寫api，參考架構，差別最大的是該教學是使用MyBatis做資料庫操作，而我是使用JDBC，預計將來會再嘗試Redis、SpringSecurity、再加上前端完成一個完整的網站。
本來在2021年的10月初已經做好了，但遇到需要實作記住持續登入的功能，雖然SpringSecurity做得到，但部分功能都涉及到session，還有登入時候的POST方法驗證登入，變成了SpringSecurity + 自己做的POST一起登入的問題，還有持續保持登入狀態等問題，將來會再更熟悉SpringSecurity再把他做整合。
本例相關工具、環境、語言、配置 開發環境：
 Java 11 IntelliJ IDEA 2020.3.2 Spring Boot 2.3.7 RELEASE  工具：
Lombok（使用教學）用途：提高開發效率，自動產生getter以及setter等等。
資料庫：MySql 8.0.22
操作資料庫方法：JDBC
前端模板引擎：Freemarker
其他：
前端：html、css、javascript、jquery、ajax
學習到的新知識：
密碼加密、統一異常處例、AOP、MVC、Spring Session
如果以上有東西不熟悉的話，可以參考本網站個文章來做參考。
application.properties配置 #DB Configuration spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/db_store?serverTimezone=Asia/Taipei&amp;amp;characterEncoding=utf-8 spring.datasource.username=root spring.datasource.password=springboot #Spring Session ## Session 存儲方式 spring.session.store-type=redis ## Session 過期時間，默認單位為 s server.servlet.session.timeout=600 ## Session 存儲到 Redis 鍵的前綴 spring.session.redis.namespace=test:spring:session #Freemaker設定 spring.freemarker.cache=false # 模版後綴名 默認為ftl spring.freemarker.suffix=.ftl # 文件編碼 spring.freemarker.charset=UTF-8 # 模版加載的目錄 spring.freemarker.template-loader-path=classpath:/templates/ # 靜態資源訪問路徑 spring.mvc.static-path-pattern=/static/** # 獲取根目錄路徑 spring.</description>
    </item>
    
  </channel>
</rss>
