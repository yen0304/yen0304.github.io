<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git學習筆記 on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/</link>
    <description>Recent content in Git學習筆記 on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 16 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GIT學習筆記(3)－多人協作、分支衝突</title>
      <link>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E5%88%86%E6%94%AF%E8%A1%9D%E7%AA%81/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%983%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E5%88%86%E6%94%AF%E8%A1%9D%E7%AA%81/</guid>
      <description>GIT學習筆記(3)－多人協作、分支衝突 前言 在看工作的時候，發現很多公司都希望擁有git的經驗，雖然有過使用Github Desktop的經驗，但是還是想知道背後的原理，所以就開始上網查資料學習了。
可以參考這位六角學院的老師文章還有YT影片，實在是免費又大碗（淚。
發Github PR(pull request)請求流程 何謂PR PR可以幫助我們修改別人的遠端數據庫的程式碼，並發起一個PR到別人的遠端數據庫，審核過了就可以成功把修改正式到別人的repo了
例如：
在 GitHub 上看到別人的 CODE 有問題，想幫他修改並提交讓他更新時，就得學會如何發 PR (pull request)，發完之後別人覺得不錯，他就會commit到你剛剛發起的PR commit。
在Github發起PR 在這裡可以有一個六角學院所提供的資源，讓我們練習PR，首先到連結頁面後，可以看到Fork，點擊
 
接著就會跳到我們的數據庫，這時，用clone指令把檔案下載下來
 
接著在創建檔案，並且commit+上傳
 
這裡我是用ssh的方式上傳，成功後可以在網頁上看到：
 
接著到自己的數據庫，選擇Pull request之後
 
在按下Create pull request，下面也可以填PR的名字，還有要提交給對方的留言。
接下來到對方的repo看到我們提交的pr後，就代表成功了，剩下就只剩對方審核commit了
 
衝突 衝突就是指，分支的commit跟master的commit都動到同一行code的時候，在合併分支時就會有衝突，
本地衝突情境  
情況製作好後，直接merge看看有什麼變化：
終端機出現：
➜ gitTest git:(master) ✗ git commit -m &amp;#34;修改標題master&amp;#34; [master d02ff9a] 修改標題master 1 file changed, 1 insertion(+), 1 deletion(-) ➜ gitTest git:(master) git merge dev 自動合併 index.</description>
    </item>
    
    <item>
      <title>GIT學習筆記(2)－分支、還原</title>
      <link>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982%E5%88%86%E6%94%AF%E9%82%84%E5%8E%9F/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%982%E5%88%86%E6%94%AF%E9%82%84%E5%8E%9F/</guid>
      <description>GIT學習筆記(2)－分支、還原、協作 前言 在看工作的時候，發現很多公司都希望擁有git的經驗，雖然有過使用Github Desktop的經驗，但是還是想知道背後的原理，所以就開始上網查資料學習了。
可以參考這位六角學院的老師文章還有YT影片，實在是免費又大碗（淚。
HEAD指標 HEAD就是目前指向的版本狀態，他可以指向到分支或是commit
所以要回到先前的commit的話：
查詢commit版本 1.透過 git log來看所有commit
 
在每個 commit 旁邊的亂數就是SHA-1 值
移動HEAD 要回到最初始的時後，使用git checkout &amp;lt;SHA-1值&amp;gt;，
 
這時候到本地目錄查看，其實檔案都回到了該HEAD移動的commit版本。
接著可以到sourcetree查看，可以看到HEAD移動到了剛剛指定的commit版本
 
Sourcetree移動HEAD 如果想要sourcetrr移動HEAD的話，在想要過去的commit點擊兩下就可以了
 
按下ok之後就可以看到檔案被加進去、HEAD也跟著移動了
回到最新的版本 如果想要回到最新的commit，使用
git checkout master 就可以了
分支 分支可以說是git的重頭戲了，分支的好處，就是每一條線都各司其職，做完事後，再將兩條線的功能合併，並部署上線。
舉個分支個例子，例如公司在遠端伺服器上傳了主線(origin master)，在做beta但是不想污染上線的程式碼，這時候就需要分支做beta測試等等。
大概是這些概念
建立分支(git branch) git branch &amp;lt;分支名稱&amp;gt; 在終端機輸入git branch dev後，就可以從sourcetree的commit也多了一個dev
 
接下來再
把HEAD移到分支(git checkout) git checkout &amp;lt;分支名稱&amp;gt; 可以用git branch查看
可以看到下面圖片sourcetree（左），終端機（右）的*號都移到了dev的位置。
圈圈、*號所代表的是目前git checkout位置（HEAD）
 
接著新增檔案index2.html並直接commit來看看變化：
➜ gitTest git:(dev) touch index2.</description>
    </item>
    
    <item>
      <title>GIT學習筆記－從初始化到上傳至遠端數據庫</title>
      <link>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%E5%BE%9E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E4%B8%8A%E5%82%B3%E8%87%B3%E9%81%A0%E7%AB%AF%E6%95%B8%E6%93%9A%E5%BA%AB/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/git%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%E5%BE%9E%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%B0%E4%B8%8A%E5%82%B3%E8%87%B3%E9%81%A0%E7%AB%AF%E6%95%B8%E6%93%9A%E5%BA%AB/</guid>
      <description>GIT學習筆記－從初始化到上傳至遠端數據庫 前言 在看工作的時候，發現很多公司都希望擁有git的經驗，雖然有過使用Github Desktop的經驗，但是還是想知道背後的原理，所以就開始上網查資料學習了。
可以參考這位六角學院的老師文章還有YT影片，實在是免費又大碗（淚。
安裝＆測試 用終端機使用brew安裝git：
Install command:
brew install git 測試：
打開終端機，輸入 git --version
➜ ~ git --version git version 2.34.1 就代表安裝成功了
Git基礎操作 首先這邊學習到終端機的使用，可以快速的移動到專案資料夾，
設定個人資訊 git config --global user.name &amp;#34;您的姓名&amp;#34; git config --global user.email &amp;#34;您的Email&amp;#34; 查詢設定是否成功 git config --list 成功顯示之後按下q離開
新建數據庫(Repository) 在電腦新增資料夾後，透過cd前往，在執行git指令$ git init，
$ git init 接著到資料夾，並顯示隱藏檔案，就會看到.git資料夾了。
接著到了
版控流程  開新資料夾，git init 建立數據庫 新增一個 index.html 檔案  接著輸入git status
到這裡應該會出現：
 結果 
可以看到終端機告訴我們；
➜ gitTest git:(master) git status 位於分支 master 尚無提交 未追蹤的檔案: （使用 &amp;#34;git add &amp;lt;檔案&amp;gt;.</description>
    </item>
    
  </channel>
</rss>
