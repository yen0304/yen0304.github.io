<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Freemarker on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/freemarker/</link>
    <description>Recent content in Freemarker on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 08 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/freemarker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot電商平台實戰(1)，用戶註冊、用戶登入、修改資料</title>
      <link>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</guid>
      <description>SpringBoot電商平台實戰(1) 前言 在練習的差不多之後，決定實作一個完整的電商平台「SpringBoot電商平台實戰」，也參考了不少網路上的資源，主要是參考CSDN上的雨醉東風（由於不知能不能引用所以有興趣可以自行查詢）來撰寫api，參考架構，差別最大的是該教學是使用MyBatis做資料庫操作，而我是使用JDBC，預計將來會再嘗試Redis、SpringSecurity、再加上前端完成一個完整的網站。
本來在2021年的10月初已經做好了，但遇到需要實作記住持續登入的功能，雖然SpringSecurity做得到，但部分功能都涉及到session，還有登入時候的POST方法驗證登入，變成了SpringSecurity + 自己做的POST一起登入的問題，還有持續保持登入狀態等問題，將來會再更熟悉SpringSecurity再把他做整合。
本例相關工具、環境、語言、配置 開發環境：
 Java 11 IntelliJ IDEA 2020.3.2 Spring Boot 2.3.7 RELEASE  工具：
Lombok（使用教學）用途：提高開發效率，自動產生getter以及setter等等。
資料庫：MySql 8.0.22
操作資料庫方法：JDBC
前端模板引擎：Freemarker
其他：
前端：html、css、javascript、jquery、ajax
學習到的新知識：
密碼加密、統一異常處例、AOP、MVC、Spring Session
如果以上有東西不熟悉的話，可以參考本網站個文章來做參考。
application.properties配置 #DB Configuration spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/db_store?serverTimezone=Asia/Taipei&amp;amp;characterEncoding=utf-8 spring.datasource.username=root spring.datasource.password=springboot #Spring Session ## Session 存儲方式 spring.session.store-type=redis ## Session 過期時間，默認單位為 s server.servlet.session.timeout=600 ## Session 存儲到 Redis 鍵的前綴 spring.session.redis.namespace=test:spring:session #Freemaker設定 spring.freemarker.cache=false # 模版後綴名 默認為ftl spring.freemarker.suffix=.ftl # 文件編碼 spring.freemarker.charset=UTF-8 # 模版加載的目錄 spring.freemarker.template-loader-path=classpath:/templates/ # 靜態資源訪問路徑 spring.mvc.static-path-pattern=/static/** # 獲取根目錄路徑 spring.</description>
    </item>
    
    <item>
      <title>Freemarker &#43; Spring Security 整合</title>
      <link>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</guid>
      <description>Freemarker + Spring Security 整合 由於方便往後的實戰學習，在學會了快速的在Spring Boot 使用Freemarker在localhost:8080上執行之後，也學會了用Spring Security 控制訪問權限，在整合他們途中，其實遇到了不少配置上的問題，但也成功解決了，所以決定記錄這些解決問題的過程，也更了解了Spring Security的認證寫法。
pom.xml maven配置 Spring Security （先不要加上spring Security，因為加上去了所有為配置的默認都會受到全縣控管）
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Freemarker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Application.properties配置 Freemaker設定 #Freemaker設定spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/# 靜態資源訪問路徑spring.mvc.static-path-pattern=/static/**# 獲取根目錄路徑spring.freemarker.request-context-attribute=request開始撰寫程式部分 這部分的先後順序很重要，因為如果Freemarker其中有錯誤，css或js會跑不出來，也同樣的Spring Security如果有錯誤，css或js也會因爲訪問權限而跑不出來，所以在撰寫時順序如下
撰寫順序  確認Freemarker配置成功，包含get請求，以及靜態資源css js訪問成功 使用Spring Security下，得知靜態支援有受到保護，並請把保護關閉。 使用Spring security測試相關功能。  Freemaker靜態配置至測試成功 檔案存放位置 檔案存放位置很重要，也跟application.properties很相關，包含了靜態資源的訪問路徑，
這次規劃了user_login.ftl、login.css、login.js為登入Spring Security角色頁面
，login_success、login_success.css為登入成功登入之後跳轉的頁面
 ftl、css、js檔案存放配置 
Ftl(html)存取css、js之重點 在login_success下，存取css、js的html語法為下
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/login.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;/static/js/login.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 重點就是因為我們已經配置好了路徑，所以會因Freemarker會有不同的寫法
Controller層 應該沒什麼好解釋的
@Controller public class Controller { @GetMapping(&amp;#34;/user_login&amp;#34;) public String loginpage(Model model) { return &amp;#34;/user_login&amp;#34;; } @GetMapping(&amp;#34;/login_success&amp;#34;) public String successpage(Model model) { return &amp;#34;/login_success&amp;#34;; } } 如何判斷測試成功 運行SpringBoot之後，以下圖解是我們看到的畫面，使用瀏覽器是chrome</description>
    </item>
    
    <item>
      <title>Spingboot&#43;Freemarker基本配置</title>
      <link>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 Springboot + Freemaker 基本設置 前端複習的差不多了，所以來試試如何將後端數據傳到前，在google的幫助下，瞭解了要用搜尋關鍵字Springboot + Freemaker，Freemaker 跟thymeleaf是差不多功能的東西，雖然Springboot官方是推薦使用thymeleaf，但網路上比較上是Freemaker勝出，且在設定上好像較容易，所以就使用Freemaker作為模板引擎了
在網路上的資源很多，從官方到個人網站都有教學，大同小異，但是到了最後連結上還是出了小問題，幸好最終解決了，所以在這紀錄一下架設過程，希望大家需要時能按圖施工保證成功！！
環境介紹 開發平台：IntelliJ 2020.3
Springboot版本：2.3.7.release
前端：html、css、皆快速使用bootstrap
1.maven添加Freemaker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.檔案路徑&amp;amp;Freemaker環境配置 接下來檔案路徑就很重要了，
步驟1.
將自己index.html檔案放在resources/templates裡面，步驟是將檔案拉進去resources/templates後，intellij會詢問檔案名稱，這時候把副檔名改成ftl
接著要修改模板預設參數，在application.properties裡打上以下程式碼
spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/步驟2.
css、js檔案放在resources/static底下，切記，**一定要在static下新增css以及js資料夾！**否則會無法成功取得（我就是在這邊卡很久）。
3.測試用程式碼 接著新增controller,並使用getmapping
如下：
@Controller public class Logincontroller { @GetMapping(&amp;#34;/page&amp;#34;) public String show(Model model) { model.addAttribute(&amp;#34;name&amp;#34;,&amp;#34;測試&amp;#34;); return &amp;#34;/index&amp;#34;; } } 這邊要注意的地方是，
return &amp;#34;/index&amp;#34;; return的值就是ftl的檔案名稱
接著到index.ftl到隨便一個地方 加入 ${name} 來測試
我的長這樣：
&amp;lt;label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;remember-me&amp;#34;/&amp;gt; ${name} &amp;lt;/label&amp;gt; 4.檔案結構＆成果 這邊附上完整的檔案路徑配置
 
運行成果：</description>
    </item>
    
  </channel>
</rss>
