<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Springboot on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/springboot/</link>
    <description>Recent content in Springboot on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 09 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot電商平台實戰(2)，商品詳情、熱門商品排序</title>
      <link>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B02%E5%95%86%E5%93%81%E8%A9%B3%E6%83%85%E7%86%B1%E9%96%80%E5%95%86%E5%93%81%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B02%E5%95%86%E5%93%81%E8%A9%B3%E6%83%85%E7%86%B1%E9%96%80%E5%95%86%E5%93%81%E6%8E%92%E5%BA%8F/</guid>
      <description>SpringBoot電商平台實戰(2) 前言 本章承SpringBoot電商平台實戰(1)的專案，所以配置、工具等等都一樣。
在實作商品有關的MVC時，其實沒有遇到什麼困難，畢竟東西熟悉了，也不用去用到session或是驗證等等，時間花最久的應該是在前端的javascript吧！因為本身沒有在做太多的研究，所以就依照兩年前學的也把它做完了，那些東西看了程式碼應該都知道，所以有興趣的可以至github下載，這章節就不做太多的介紹了。
免跨域註解@CrossOrigin的另一個方法 之後看到網路上的連接，得知不用加上@CrossOrigin(origins = &amp;ldquo;*&amp;quot;)
可以參考本連結，也是透過設置webconfiguration的方式
程式碼：
@Configuration public class CORSConfig { @Bean public WebMvcConfigurer corsConfigurer() { return new WebMvcConfigurerAdapter() { @Override public void addCorsMappings(CorsRegistry registry) { registry.addMapping(&amp;#34;/**&amp;#34;) .allowedHeaders(&amp;#34;*&amp;#34;) .allowedMethods(&amp;#34;*&amp;#34;) .allowedOrigins(&amp;#34;*&amp;#34;); } }; } } 所以maven中也可以省去了
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-codec&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-codec&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 規劃資料庫中的商品數據 資料表創建相關數據：
CREATETABLEt_product(idINTAUTO_INCREMENTPRIMARYKEY,categoryIdINT(20)DEFAULTNULLCOMMENT&amp;#39;商品分類id&amp;#39;,typeCHAR(100)DEFAULTNULLCOMMENT&amp;#39;商品類別&amp;#39;,titleCHAR(60)DEFAULTNULLCOMMENT&amp;#39;商品標題（名稱）&amp;#39;,priceINT(20)COMMENT&amp;#39;單價&amp;#39;,numINT(20)COMMENT&amp;#39;數量&amp;#39;,imagepathVARCHAR(100)COMMENT&amp;#39;圖片路徑&amp;#39;,priorityINT(10)DEFAULTNULLCOMMENT&amp;#39;顯示優先程度&amp;#39;,statusINT(1)DEFAULT1COMMENT&amp;#39;上架狀態1是0否&amp;#39;,created_userVARCHAR(20)COMMENT&amp;#39;創建人&amp;#39;,created_timeDATETIMECOMMENT&amp;#39;創建時間&amp;#39;,modified_userVARCHAR(20)COMMENT&amp;#39;最後修改人&amp;#39;,modified_timeDATETIMECOMMENT&amp;#39;最后修改時間&amp;#39;)Product Class 接下來創建Product這個類別，當然繼承了BaseEntity
@Data public class Product extends BaseEntity implements Serializable { private Integer id; private Integer categoryId; private String type; private String title; private Integer price; private Integer num; private String imagepath; private Integer status; private Integer priority; } ProductRowMapper public class ProductRowMapper implements RowMapper&amp;lt;Product&amp;gt; { @Override public Product mapRow(ResultSet resultSet, int i) throws SQLException { Product product=new Product(); //後面result.</description>
    </item>
    
    <item>
      <title>SpringBoot電商平台實戰(1)，用戶註冊、用戶登入、修改資料</title>
      <link>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E9%9B%BB%E5%95%86%E5%B9%B3%E5%8F%B0%E5%AF%A6%E6%88%B01%E7%94%A8%E6%88%B6%E8%A8%BB%E5%86%8A%E7%94%A8%E6%88%B6%E7%99%BB%E5%85%A5%E4%BF%AE%E6%94%B9%E8%B3%87%E6%96%99/</guid>
      <description>SpringBoot電商平台實戰(1) 前言 在練習的差不多之後，決定實作一個完整的電商平台「SpringBoot電商平台實戰」，也參考了不少網路上的資源，主要是參考CSDN上的雨醉東風（由於不知能不能引用所以有興趣可以自行查詢）來撰寫api，參考架構，差別最大的是該教學是使用MyBatis做資料庫操作，而我是使用JDBC，預計將來會再嘗試Redis、SpringSecurity、再加上前端完成一個完整的網站。
本來在2021年的10月初已經做好了，但遇到需要實作記住持續登入的功能，雖然SpringSecurity做得到，但部分功能都涉及到session，還有登入時候的POST方法驗證登入，變成了SpringSecurity + 自己做的POST一起登入的問題，還有持續保持登入狀態等問題，將來會再更熟悉SpringSecurity再把他做整合。
本例相關工具、環境、語言、配置 開發環境：
 Java 11 IntelliJ IDEA 2020.3.2 Spring Boot 2.3.7 RELEASE  工具：
Lombok（使用教學）用途：提高開發效率，自動產生getter以及setter等等。
資料庫：MySql 8.0.22
操作資料庫方法：JDBC
前端模板引擎：Freemarker
其他：
前端：html、css、javascript、jquery、ajax
學習到的新知識：
密碼加密、統一異常處例、AOP、MVC、Spring Session
如果以上有東西不熟悉的話，可以參考本網站個文章來做參考。
application.properties配置 #DB Configuration spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/db_store?serverTimezone=Asia/Taipei&amp;amp;characterEncoding=utf-8 spring.datasource.username=root spring.datasource.password=springboot #Spring Session ## Session 存儲方式 spring.session.store-type=redis ## Session 過期時間，默認單位為 s server.servlet.session.timeout=600 ## Session 存儲到 Redis 鍵的前綴 spring.session.redis.namespace=test:spring:session #Freemaker設定 spring.freemarker.cache=false # 模版後綴名 默認為ftl spring.freemarker.suffix=.ftl # 文件編碼 spring.freemarker.charset=UTF-8 # 模版加載的目錄 spring.freemarker.template-loader-path=classpath:/templates/ # 靜態資源訪問路徑 spring.mvc.static-path-pattern=/static/** # 獲取根目錄路徑 spring.</description>
    </item>
    
    <item>
      <title>Freemarker &#43; Spring Security 整合</title>
      <link>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/freemarker-spring-security-%E6%95%B4%E5%90%88/</guid>
      <description>Freemarker + Spring Security 整合 由於方便往後的實戰學習，在學會了快速的在Spring Boot 使用Freemarker在localhost:8080上執行之後，也學會了用Spring Security 控制訪問權限，在整合他們途中，其實遇到了不少配置上的問題，但也成功解決了，所以決定記錄這些解決問題的過程，也更了解了Spring Security的認證寫法。
pom.xml maven配置 Spring Security （先不要加上spring Security，因為加上去了所有為配置的默認都會受到全縣控管）
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Freemarker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Application.properties配置 Freemaker設定 #Freemaker設定spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/# 靜態資源訪問路徑spring.mvc.static-path-pattern=/static/**# 獲取根目錄路徑spring.freemarker.request-context-attribute=request開始撰寫程式部分 這部分的先後順序很重要，因為如果Freemarker其中有錯誤，css或js會跑不出來，也同樣的Spring Security如果有錯誤，css或js也會因爲訪問權限而跑不出來，所以在撰寫時順序如下
撰寫順序  確認Freemarker配置成功，包含get請求，以及靜態資源css js訪問成功 使用Spring Security下，得知靜態支援有受到保護，並請把保護關閉。 使用Spring security測試相關功能。  Freemaker靜態配置至測試成功 檔案存放位置 檔案存放位置很重要，也跟application.properties很相關，包含了靜態資源的訪問路徑，
這次規劃了user_login.ftl、login.css、login.js為登入Spring Security角色頁面
，login_success、login_success.css為登入成功登入之後跳轉的頁面
 ftl、css、js檔案存放配置 
Ftl(html)存取css、js之重點 在login_success下，存取css、js的html語法為下
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/login.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;/static/js/login.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 重點就是因為我們已經配置好了路徑，所以會因Freemarker會有不同的寫法
Controller層 應該沒什麼好解釋的
@Controller public class Controller { @GetMapping(&amp;#34;/user_login&amp;#34;) public String loginpage(Model model) { return &amp;#34;/user_login&amp;#34;; } @GetMapping(&amp;#34;/login_success&amp;#34;) public String successpage(Model model) { return &amp;#34;/login_success&amp;#34;; } } 如何判斷測試成功 運行SpringBoot之後，以下圖解是我們看到的畫面，使用瀏覽器是chrome</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(3)-Controller層、Dao層、Service層的測試方式，MockMvc使用詳解 </title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A63-controller%E5%B1%A4dao%E5%B1%A4service%E5%B1%A4%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%96%B9%E5%BC%8Fmockmvc%E4%BD%BF%E7%94%A8%E8%A9%B3%E8%A7%A3/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A63-controller%E5%B1%A4dao%E5%B1%A4service%E5%B1%A4%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%96%B9%E5%BC%8Fmockmvc%E4%BD%BF%E7%94%A8%E8%A9%B3%E8%A7%A3/</guid>
      <description>SpringBoot學習筆記-單元測試(3)-Controller層、Dao層、Service層的測試方式，MockMvc使用詳解 Dao層以及Service層的測試方式 使用JUnit5測試SpringBoot程式 @SpringBootTest註解  只要在測試用的class上面加上@SpringBootTest，就會在單元測試時啟動Spring容器，也會創建Bean出來 這個@SpringBootTest的註解的功能非常完善，除了創建Bean之外，@Configuration或是攔截器Interceptor都會被生效，也就是等同於運行SpringBoot程式。 通常會把測試用的class變成public，  做好了準備之後可以運行看看成效以及顯示的結果為何：
@SpringBootTest public class StudentDaoImplTest { //注入bean  @Autowired private StudentDao studentDao; @Test public void getById(){ Student student = studentDao.getById(1); assertNotNull(student); assertEquals(&amp;#34;Amy&amp;#34;,student.getName()); } } 運行成果：
 
@Transactional註解 假設今天我們透過@Test想測試deleteById的方法時，實際上是會去真實刪除資料庫裡面的數據的，所以如果先執行了測試deleteById，在執行測試getById，這時候如果Id是一樣的情況下，就會影響到測試結果，雖然可以透過測試不同的Id來避免此情況，但在越複雜的專案時此方法很不適合，所以我們可以透過加上@Transactional註解，在單元測試結束之後，SpringBoot會去rollback（回滾）這個單元測試裡面所有的資料庫操作。
使用範例：
@Transactional @Test public void deleteById(){ studentDao.deleteById(1); Student student =studentDao.getById(1); assertNull(student); } 不同的@Transactional註解 @Transactional在不同的資料夾下，有不同的差異，
   資料夾 @Transactional公用     main資料夾 程式運行中發生錯誤才進行rollback   test資料夾 單元測試結束之後，強制執行rollback    Controller層的測試 Controller層的測試目的在於，要模擬前端呼叫真實API CAll的行為，看API是否能運行正確，並且不能透過注入Bean的方式來測試，意思就是模擬http request</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(4)-使用Mockito來減少單元測試中的Bean依賴</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A64-%E4%BD%BF%E7%94%A8mockito%E4%BE%86%E6%B8%9B%E5%B0%91%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%AD%E7%9A%84bean%E4%BE%9D%E8%B3%B4/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A64-%E4%BD%BF%E7%94%A8mockito%E4%BE%86%E6%B8%9B%E5%B0%91%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%AD%E7%9A%84bean%E4%BE%9D%E8%B3%B4/</guid>
      <description>SpringBoot學習筆記-單元測試(4)-Mockito 前言 部分文章內容來自於古老師在hahow的課程，還有古老師的部落格，想要做筆記的原因是因為，邊記變做會比較容易記住，改天忘了也可以用自己的方式去理解。
Mock測試目的與特性 單元測試的特性為下：
1.可以被自動化運行
2.各個單元測試互相獨立，彼此之間不能有依賴關係
3.測試結果穩定，不受外部服務影響
在前面的筆記，如果要測試Service層的話，應該會這樣寫：
@SpringBootTest public class StudentServiceImplMockTest { @Autowired StudentService studentService; @Test public void getById(){ Student student=studentService.getById(3); assertNotNull(student); assertEquals(3,student.getId()); assertEquals(&amp;#34;Judy&amp;#34;,student.getName()); } } 在上面的測試單元裡，StudentService其實用到了StudentDao這個Bean，
並不符合地２點，Bean之前在上面是有依賴關係的，所以Mock測試的
 目的：避免測試某一個單元測試，而去建構整個bean的依賴。 作法：創造一個假的bean，替換掉容器原有的bean。  在程式裡面Mock的意思為「假的」的意思，而非英文單字模仿。
Mockito Mockito是Spring Boot中，進行Mock測試的工具
功能大致上分為：
 模擬方法的返回值 模擬拋出Exception 記錄方法的使用次數、順序  @MockBean @Test public void getById(){ //第二步  Student mockStudent = new Student(); mockStudent.setId(100); mockStudent.setName(&amp;#34;mockname&amp;#34;); //這句話的意思就是，當有人使用studentDao.getById(3)時，固定return mockStudent這個object  Mockito.when(studentDao.getById(3)).thenReturn(mockStudent); Student student=studentService.getById(3); assertNotNull(student); assertEquals(3,student.getId()); assertEquals(&amp;#34;Judy&amp;#34;,student.getName()); } 執行結果：
org.opentest4j.AssertionFailedError: Expected :3 Actual :100 再把</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(2)-JUnit5使用教學</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A62-junit5%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A62-junit5%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8/</guid>
      <description>SpringBoot學習筆記-單元測試(2)-JUnit JUnit介紹 何謂JUnit?  jUnit是java單元測試的必備工具 只要在方法上加入@Test，即可生成一個單元測試  JUnit與Spring Boot的關係   Spring Boot &amp;lt;=2.1
只能使用JUnit4
  Spring Boot 2.2 2.3
可以使用JUnit4、JUint5。
  Spring boot &amp;gt;=2.4
只能使用JUnit5
  所以綜合上述，現階段會以Junit5作為主流，其中需要注意的是，Spring Boot如果在2.2以及2.3版本中，需要到pom.xml加上額外設定才能禁用JUint4。
在Spring Boot 2.2版本或2.3版本禁用JUnit4 如果需要在Spring Boot 2.2版本或2.3版本禁用JUnit4在pom.xml中，我們的程式碼其中有關測試單元的大致上會長這樣：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 我們只需新增下面這幾段程式碼即可禁用JUnit4，上面那段程式碼會變成這樣：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; Junt5的用法 Junit5的用法 以圖片說明：
 
其中第三點看起來簡單，但正是最精華的所在處，因為如果要讓團隊或是別人看懂這個方法的作用，命名正是我們最重要的工作。
JUnit5 Assert 下面用表格來說明Assert斷言用法的主要用途
   Assert系列用法 用途     assertNull(A) 斷言A為Null   assertNotNull(A) 斷言A不為Null   assertEquals(A,B) 斷言A與B相等   assertTure(A) 斷言A為True   assertFalse(A) 斷言A為False   assertThrows(exception,method) 斷言執行method的時候，會噴出exception    JUnit其他常用註解 @BeforceEach @BeforceEach：在每次@Test開始之前，「都會」執行一次</description>
    </item>
    
    <item>
      <title>SpringBoot學習筆記-單元測試(1)-基礎介紹</title>
      <link>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A61-%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/springboot%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A61-%E5%9F%BA%E7%A4%8E%E4%BB%8B%E7%B4%B9/</guid>
      <description>SpringBoot學習筆記-單元測試(1) 在學了SpringBoot中，不少的核心知識CRUD操作，接下來要學習的是該如何去測試我們撰寫好的功能
何謂單元測試（Unit Testing）？ 目的：自動化測試程式的正確性
所謂的單元測試，就是一次只測試一個功能點，一個單元可以是一個method，或是一個API
單元測試的特性＆注意事項 單元測試的特性 1.可以被自動化運行
2.各個單元測試互相獨立，彼此之間不能有依賴關係
3.測試結果穩定，不受外部服務影響
單元測試的注意事項 1.測試的程式要放在test資料夾裡面
2.測試的class名稱以「原class的名字加上Test做為結尾」來命名
3.測試的class的package要跟原class的package保持一致
環境部署&amp;amp;基礎範例  環境部署 如果想要在springboot裡面使用單元測試功能，要在pom.xml裏面新增這個maven，不過這段程式碼在一般創建springboot程式中就會加上去了
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt;  開始測試 先在demo的package底下新增一個簡易的計算機class Calcultor ，
首先如果我們一般在進行撰寫時，程式大概會長這樣：
public class Calcultor { public int add(int x,int y){ return(x+y); } public static void main(String[] args) { Calcultor calcultor =new Calcultor(); int result = calcultor.add(1,2); System.out.println(&amp;#34;結果為&amp;#34; + result); } } 結果會理所當然的出現結果為3，但假設今天某個工程師在add方法裡寫錯了，就必須花時間去尋找add方法裡是否有錯誤，所以我們這時候就要去利用單元測試去完成自動化測試。
首先在Calcultor 裡面點擊右鍵，選擇Generate-&amp;gt;Test ，Testing Library選擇JUnit5 如下圖：
 
接著就可以看到在Test底下的demo Package看到CalculatorTest這個Class，我們用以下程式碼來完成第一個測試的程式：</description>
    </item>
    
    <item>
      <title>Spring Security(4)訪問權限註解@Securitd、@PreAuthorize</title>
      <link>https://yen0304.github.io/p/spring-security4%E8%A8%AA%E5%95%8F%E6%AC%8A%E9%99%90%E8%A8%BB%E8%A7%A3securitdpreauthorize/</link>
      <pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-security4%E8%A8%AA%E5%95%8F%E6%AC%8A%E9%99%90%E8%A8%BB%E8%A7%A3securitdpreauthorize/</guid>
      <description>前置作業 前置作業方面，需要先在資料庫中新增使用者數據，並完成使用JDBC進行登入帳密的功能，可以參考
Spring Security(2)使用Spring Security自定義使用者帳密、使用JDBC串接資料庫，然後先新增一筆使用者帳密，並權限設定為ROLE_USER
@EnableGlobalMethodSecurity @EnableGlobalMethodSecurity這個註解是表示，我們要透過@Securitd， @PreAuthorize，@RolesAllowed這些註解，並透過用戶權限來訪問我們的方法
第一種使用方式：
@EnableGlobalMethodSecurity的用法就是加在配置類中就可以了，當然我們熟悉的@configuration是用來表示此類別是用來設定springboot用的，@EnableGlobalMethodSecurity已經包含了@configuration，所以我們直接在我們繼承WebSecurityConfigurerAdapter的類別上面加上@EnableGlobalMethodSecurity註解即可
@EnableGlobalMethodSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { //... } 第二種是用方式：
放在啟動類上面(Application)。
@EnableGlobalMethodSecurity @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } 而如果要使用@Secured、@PreAuthorize、@PostAuthorize，的話都要先開啟註解功能，也就是在我們的@EnableGlobalMethodSecurity加上(Securitd=true)、(prePostEnabled = true)、
舉例：
開啟@Secured功能
@EnableGlobalMethodSecurity(securedEnabled=true)
開啟@PreAuthorize或是@PostAuthorize
@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true) 如果要同時使用的話，@EnableGlobalMethodSecurity(securedEnabled = true,prePostEnabled = true)，就可以了
四種加在方法上的註解 主要是@Securitd、@PreAuthorize最為常用，
所以下面實作中會解釋兩者最大的差別
   Security Annotation (註解) 使用時機     @Secured 用戶有某個角色，驗證後進行方法   @PreAuthorize 在方法執行之前進行驗證，並能將用戶的roles/premission參數傳入到方法中   @PostAuthorize 在方法執行之後，在進行驗證   @PostFilter 將方法的返回數值進行過濾   @PreFilter 將傳入方法的值進行過濾    實作 以下實作最常使用到的@Secured以及@PreAuthorize，可以發現@PreAuthorize在設定權限參數中，使用了hasAnyAuthority加入前綴，使權限在資料庫的名稱為ROLE_USER，hasAnyAuthority是spring EL表示式（Spring Expression Language）的一種，@Secured並沒有支援spring EL表示式，且也沒有像@PreAuthorize可以將驗證的參數傳入方法中，所以簡單來說@PreAuthorize就是@Secured的加強版</description>
    </item>
    
    <item>
      <title>Spring Security(3)自定義登入頁面、控制角色權限登入</title>
      <link>https://yen0304.github.io/p/spring-security3%E8%87%AA%E5%AE%9A%E7%BE%A9%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2%E6%8E%A7%E5%88%B6%E8%A7%92%E8%89%B2%E6%AC%8A%E9%99%90%E7%99%BB%E5%85%A5/</link>
      <pubDate>Sun, 12 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-security3%E8%87%AA%E5%AE%9A%E7%BE%A9%E7%99%BB%E5%85%A5%E9%A0%81%E9%9D%A2%E6%8E%A7%E5%88%B6%E8%A7%92%E8%89%B2%E6%AC%8A%E9%99%90%E7%99%BB%E5%85%A5/</guid>
      <description>前言 在前一章Spring Security(2)使用Spring Security自定義使用者帳密、使用JDBC串接資料庫中，我們知道了如何透過Spring Security自定義的角色來訪問我們的頁面，接下來要做的是，如何設定哪些頁面不用登入跟可以訪問、哪些頁面有帳號密碼到才可以訪問，或是我們自定義的權限角色管理員、銷售員、就像賣場的賣家與用戶一樣，去控制這些頁面，也將訪問頁面設定成前端設計好的頁面，實現真正的前後端分離，減少溝通成本。
自定義登入頁面 要自定義頁面時，一樣到專門設定Spring Security中的一個類別WebSecurityConfigurerAdapter，在前幾章中我們用了SecurityConfig去繼承他，在自定義頁面時，我們要先實作方法configure(HttpSecurity http)，一樣按右鍵-&amp;gt;Generate-&amp;gt;Override Methods，選擇configure(HttpSecurity http)。
在使用之前，值得注意的事情是SecurityConfig的antMatchers順序是有關係的，在每一個url執行時，程式如果返回了True下面就不會執行了，例如，如果anyRequest().permitAll()設定在其他規則比較嚴格條件的前面的話，Spring Security判斷符合條件，就不會往下在走，意思是最鬆的規則應該在放在最後面，越是嚴格的規則要放在前面。
下面範例提供了幾個較常用的功能，如下：
@Override protected void configure(HttpSecurity http) throws Exception { http.formLogin() //自定義登入頁面  .loginPage(&amp;#34;/login.html&amp;#34;) .loginProcessingUrl(&amp;#34;/user/login&amp;#34;) //設定登入頁面的url  .usernameParameter(&amp;#34;uname&amp;#34;)///登入表單form中使用者名稱輸入框input的name名，不修改的話預設是username  .passwordParameter(&amp;#34;pword&amp;#34;)//form中密碼輸入框input的name名，不修改的話預設是password  .defaultSuccessUrl(&amp;#34;/home&amp;#34;) //成功登入之後導向  .and().authorizeRequests() //表示要定義哪些被保護(.authenticated())，哪些不需要保護（authorizeRequests()）  .antMatchers(&amp;#34;/&amp;#34;,&amp;#34;/hello&amp;#34;).permitAll() //設置不管有無登入都可以直接訪問(permitAll)  .anyRequest().authenticated() //這樣寫代表除了以上之外，其他都需要被保護  .and().csrf().disable(); //關閉csrf防護 } 選擇角色權限進行控制的四種方法 在Spring Security中，我們可以針對用戶的角色進行訪問頁面的權限控制，例如說，設定某些頁面管理員才能訪問，有些頁面大家都可以訪問，或是自定義的角色等等，針對各種不同的情況，共有四種方法，返回都是True or False
四種方法比較表格    方法名稱 舉例 意思     hasAuthority(String authority) hasAuthority(&amp;ldquo;ADMIN&amp;rdquo;) ADMIN角色才可以訪問   hasAnyAuthority(String&amp;hellip; authorities) hasAnyAuthority(&amp;ldquo;ADMIN,MANAGER&amp;rdquo;) 有ADMIN或MANAGER其中一個符合就可以訪問   hasRole(String role) hasRole(&amp;ldquo;Sale&amp;rdquo;) 角色權限全名ROLE_Sale才可以訪問   hasAnyRole(String&amp;hellip; roles) hasAnyRole(&amp;ldquo;Sale,User&amp;rdquo;) 有角色權限全名ROLE_Sale或ROLE_User其中一者就可以訪問    hasAuthority()跟 hasRole()的雖然很像，其實都是設定角色是否可以訪問，但是如果查看一下hasRole()的來源碼，就可以知道差別</description>
    </item>
    
    <item>
      <title>Spring Security(2)使用Spring Security自定義使用者帳密、使用JDBC串接資料庫</title>
      <link>https://yen0304.github.io/p/spring-security2%E4%BD%BF%E7%94%A8spring-security%E8%87%AA%E5%AE%9A%E7%BE%A9%E4%BD%BF%E7%94%A8%E8%80%85%E5%B8%B3%E5%AF%86%E4%BD%BF%E7%94%A8jdbc%E4%B8%B2%E6%8E%A5%E8%B3%87%E6%96%99%E5%BA%AB/</link>
      <pubDate>Sat, 04 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-security2%E4%BD%BF%E7%94%A8spring-security%E8%87%AA%E5%AE%9A%E7%BE%A9%E4%BD%BF%E7%94%A8%E8%80%85%E5%B8%B3%E5%AF%86%E4%BD%BF%E7%94%A8jdbc%E4%B8%B2%E6%8E%A5%E8%B3%87%E6%96%99%E5%BA%AB/</guid>
      <description>繼上一章了解到了Spring Security基本的作用之後，本章節來繼續深入瞭解有關Spring Security中權限還有認證的相關設置，以及如何串接MySql資料庫數據來進行用戶認證 大概會用到的核心功能有JDBC Authentication、WebSecurityConfigurerAdapter、UserDetailsService
自訂用戶、查詢資料庫中帳號密碼 在Spring Security中，自訂登入系統的帳號與密碼主要有二種方法兩種，第一種就是透過程式設定來在後臺上寫上固定的自定義帳號密碼，第二種則是
添加依賴 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 配置application.properties 語法如下，也是最簡單的方式，在resource下找到application.properties並輸入：
spring.security.user.name=testad #自定義帳號 spring.security.user.password=abc123 #自定義密碼 透過繼承類別WebSecurityConfigurerAdapter 先新增一個類別SecurityConfig來繼承WebSecurityConfigurerAdapter，WebSecurityConfigurerAdapter是專門用來配置Spring Security的一個類別：
@Configuration //小複習:當@Configuration加在class上，表示這是一個設定spring用的class（裡面寫的東西都是設定spring) public class SecurityConfig extends WebSecurityConfigurerAdapter { //... } 再來使用configure方法來設置我們的用戶設定，在IDEA中點擊右鍵-&amp;gt;Generate-&amp;gt;Override Methods選擇我們要覆寫的方法configure(AuthenticationManagerBuilder auth)（真是方便）
會出現：
@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { super.configure(auth); } 在這個方法中，主要透過auth來設置我們的用戶名以及密碼，但在下面得例子中，也使用了Spring Security提供了類別的BCryptPasswordEncoder來加密我們的密碼，在使用BCryptPasswordEncoder時，因為我們改變了password()的接受參數類型，所以也要記得使用@Bean來實作一個password類型
@Bean PasswordEncoder password(){ return new BCryptPasswordEncoder(); } 再來就是Spring Security在進行安全驗證時，會收到輸入請求中的使用者名稱(username)，然後呼叫UserDetailsService，UserDetailsService是Spring Security用來載入使用者資訊的一個組件，他的功能就是可以提供UserDetailsService中的一個方法loadUserByUsername(String username)，來依據username回傳資料型別UserDetails的使用者資訊（參考文章：Spring Security UserDetailsService 用途)
所以我們先
實作UserDetailsService 在implements UserDetailsService的時候，只需要實作一個方法就好，那就是loadUserByUsername，在學習這裡時，稍微了解到了@Service以及＠Component的差別，就是除了閱讀讓人知道Service是處理業務邏輯之外，實際上功能其實都是一樣讓class變成Bean。
//MyUsersDetailService完整程式碼：  @Service public class MyUsersDetailService implements UserDetailsService { @Override public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException { //權限(固定用法,role是還沒用到所以拿來暫時先隨便亂取）  List&amp;lt;GrantedAuthority&amp;gt; auths = AuthorityUtils.</description>
    </item>
    
    <item>
      <title>Spring Security(1)認識Spring Security＆微演練</title>
      <link>https://yen0304.github.io/p/spring-security1%E8%AA%8D%E8%AD%98spring-security%E5%BE%AE%E6%BC%94%E7%B7%B4/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-security1%E8%AA%8D%E8%AD%98spring-security%E5%BE%AE%E6%BC%94%E7%B7%B4/</guid>
      <description>什麼是Spring Security ？ Spring Security 是一個安全框架，
在安全方面有兩個核心機制：驗證（authentication），大致上就是指系統去認證使用者是否能登入，授權（authorization）就是給予用戶權限去做某些特定的操作。
簡單實作了解實際功用 下面示範Spring Security的實際作用，只需幾個步驟就可以解決！
Maven設定 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 設計Controller @RestController public class TestController { @RequestMapping(&amp;#34;/test123&amp;#34;) public String test() { return &amp;#34;安安123&amp;#34;; } 實際運行結果 這樣就可以執行了，但是一般來說，我們輸入localhost:8080/test123時，應該會出現方法的回傳訊息&amp;quot;安安123&amp;quot;，但當我們將網頁導向localhost:8080/test會出現下面這張照片：
 要求登入畫面 
在Spring Security中，預設的帳號是user，密碼則是可以從後台的console看到
 密碼地方 
所以帳號輸入：user 密碼則輸入程式運行時給的密碼，就能成功看到畫面：
 
在這嘗試玩之後個人有使用APItester做get測試，結果會回傳401錯誤，如下圖：
 
到這邊就差不多了解到了Spring Security 的作用之處了，期待日後的學習能更順利～！。</description>
    </item>
    
    <item>
      <title>Spring Boot 管理會員資料（二）-CRUD之RUD操作</title>
      <link>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%BA%8C-crud%E4%B9%8Brud%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 28 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%BA%8C-crud%E4%B9%8Brud%E6%93%8D%E4%BD%9C/</guid>
      <description>本文章涉及的知識  Springboot 、 Spring MVC HTTP method RESTful API JDBC mySQL語法 Html、css（小部分） Javascript 、Jquery、vue（小部分）  上一次的進度 [Spring Boot 管理會員資料（一）-會員創建](https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA/#%E8%B3%87%E6%96%99%E5%BA%AB%E9%80%A3%E7%B7%9A%E8%A8%AD%E5%AE%9A-%E4%BD%BF%E7%94%A8jdbc)
上次的進度用到了CRUD操作中的Create,創建了會員資料，這次就做完剩下的Read、Update、Delete功能，所以HTTP method以及RESTful API的部分請參照上一章節
為了閱讀方便，附上一些本章節會使用到的資訊
Member Class:
public class Member { Integer id; @NotBlank String name; @NotBlank String account; @NotBlank String password; //Getter&amp;amp;Setter  } 本章節Dao Interface、Service Dao＆Implement Dao public interface MemberDao { //返回值 依據名稱對應資料庫動作（參數類型 參數名稱）  String CreatMember(Member member); List&amp;lt;Member&amp;gt; ReadMember(); List&amp;lt;Member&amp;gt; ReadByAccount(String membersAccount); String UpdateByAccount(String membersAccount,Member member); String DeleteByAccount(String membersAccount); } Service public interface MemberService { String CreatMember(Member member); List&amp;lt;Member&amp;gt; ReadMember(); List&amp;lt;Member&amp;gt; ReadByAccount(String membersAccount); String DeleteByAccount(String membersAccount); String UpdateByAccount(String membersAccount,Member member); } ServiceImpl @Component public class MemberServiceImpl implements MemberService{ @Autowired//使用InterFace 發揮spring Ioc特性  private MemberDao memberDao; @Override public String CreatMember(Member member) { return memberDao.</description>
    </item>
    
    <item>
      <title>Spring Boot 管理會員資料（一）-會員創建 CRUD-Create</title>
      <link>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA-crud-create/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spring-boot-%E7%AE%A1%E7%90%86%E6%9C%83%E5%93%A1%E8%B3%87%E6%96%99%E4%B8%80-%E6%9C%83%E5%93%A1%E5%89%B5%E5%BB%BA-crud-create/</guid>
      <description>本文章涉及的知識  Springboot 、 Spring MVC HTTP method RESTful API JDBC mySQL語法 Html、css（小部分） Javascript 、Jquery（小部分）  複習HTPP method-GET or POST 差別 GET 或 POST 的差別最大的差別在於傳遞的參數會被看見，因為參數會放在url裡面。
POST的話參數會放在request body裡面，request body裡面通常會用Json格式來進行前後端的溝通
在Spring Boot裡面，使用@RequestBody取得放在request body的參數
練習設計RESTful API RESTful API三大原則： 1.使用http method表示動作
   HTTP Method 對應資料動作     POST Create（新增）   GET Read（查詢）   PUT Update（修改）   DELETE Delete（刪除）    2.url路徑表示資源階層關係
3.response body返回json或是xml格式
設計本範例RESTful API 設計會員資料之class public class Member { Integer id; String name; String account; String password; //getter &amp;amp; setter }    Method Url 資料庫 意義     POST /members Create（新增） 創建會員   GET /members/abc123 Read（查詢） 查詢會員帳號為abc123的資料   PUT /members/abc123 Update（修改） 修改會員帳號為abc123的資料   DELETE /members/abc123 Delete（刪除） 刪除會員帳號為abc123的資料    驗證請求參數 @NotBlank 為了讓使用者的登入數值不能為空白，避免後端程式發生錯誤，可以用此方法提前一部將錯誤回報給前端。</description>
    </item>
    
    <item>
      <title>Spingboot&#43;Freemarker基本配置</title>
      <link>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/spingboot-freemarker%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</guid>
      <description>前言 Springboot + Freemaker 基本設置 前端複習的差不多了，所以來試試如何將後端數據傳到前，在google的幫助下，瞭解了要用搜尋關鍵字Springboot + Freemaker，Freemaker 跟thymeleaf是差不多功能的東西，雖然Springboot官方是推薦使用thymeleaf，但網路上比較上是Freemaker勝出，且在設定上好像較容易，所以就使用Freemaker作為模板引擎了
在網路上的資源很多，從官方到個人網站都有教學，大同小異，但是到了最後連結上還是出了小問題，幸好最終解決了，所以在這紀錄一下架設過程，希望大家需要時能按圖施工保證成功！！
環境介紹 開發平台：IntelliJ 2020.3
Springboot版本：2.3.7.release
前端：html、css、皆快速使用bootstrap
1.maven添加Freemaker &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-freemarker&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.檔案路徑&amp;amp;Freemaker環境配置 接下來檔案路徑就很重要了，
步驟1.
將自己index.html檔案放在resources/templates裡面，步驟是將檔案拉進去resources/templates後，intellij會詢問檔案名稱，這時候把副檔名改成ftl
接著要修改模板預設參數，在application.properties裡打上以下程式碼
spring.freemarker.cache=false# 模版後綴名 默認為ftlspring.freemarker.suffix=.ftl# 文件編碼spring.freemarker.charset=UTF-8# 模版加載的目錄spring.freemarker.template-loader-path=classpath:/templates/步驟2.
css、js檔案放在resources/static底下，切記，**一定要在static下新增css以及js資料夾！**否則會無法成功取得（我就是在這邊卡很久）。
3.測試用程式碼 接著新增controller,並使用getmapping
如下：
@Controller public class Logincontroller { @GetMapping(&amp;#34;/page&amp;#34;) public String show(Model model) { model.addAttribute(&amp;#34;name&amp;#34;,&amp;#34;測試&amp;#34;); return &amp;#34;/index&amp;#34;; } } 這邊要注意的地方是，
return &amp;#34;/index&amp;#34;; return的值就是ftl的檔案名稱
接著到index.ftl到隨便一個地方 加入 ${name} 來測試
我的長這樣：
&amp;lt;label&amp;gt; &amp;lt;input type=&amp;#34;checkbox&amp;#34; value=&amp;#34;remember-me&amp;#34;/&amp;gt; ${name} &amp;lt;/label&amp;gt; 4.檔案結構＆成果 這邊附上完整的檔案路徑配置
 
運行成果：</description>
    </item>
    
  </channel>
</rss>
