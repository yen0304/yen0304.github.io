<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker筆記 on Yen&#39;s部落格</title>
    <link>https://yen0304.github.io/tags/docker%E7%AD%86%E8%A8%98/</link>
    <description>Recent content in Docker筆記 on Yen&#39;s部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 07 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yen0304.github.io/tags/docker%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker筆記(3)-Docker Network &amp; Docker Volume</title>
      <link>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%983-docker-network-docker-volume/</link>
      <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%983-docker-network-docker-volume/</guid>
      <description>Docker Network &amp;amp; Docker Volume 知識來源：https://hahow.in/courses/5df27f1fa5ee510022a08500
Docker Network Mode介紹 有四種模式：
下面的圖片分別代表從Host-&amp;gt;VM-&amp;gt;Docker Engine裡面各個還有的NetWork空間，而Docker空過可能會有多個Bridge NetWork
 base 
None模式： None模式容器不會與外界接觸，外部與容器互相不能連線，是一個封閉的網路空間
Bridge模式： Bridge在容器啟動的時候，會把容器放在某個Bridge容器放在Bridge Network裡面，這些Network空間就會把IP分給容器，而不同的Network空間網路是互不相通的，如下圖，A1以及B1來自不同的網路空間，所以下面的兩個容器網路無法相通。 
Container模式 Container模式會把容器對應的現形的Container，他會與對應的容器拿到相同的IP
Host模式 Host模式會與VM network索取IP，所以他可以跟Linux VM的應用程式相通
所以以上會變成這樣子：
 
Docker Network實作 列出目前所有的網路模式：
docker network ls ➜ ~ docker network ls NETWORK ID NAME DRIVER SCOPE 9e5d8527e2f5 bridge bridge local a21823e2ef89 host host local 7f054863856c none null local None模式 指定Container的網路模式：
docker run -d --network none --name none-mode alpine tail -f /dev/null 上面的格式解釋：</description>
    </item>
    
    <item>
      <title>Docker筆記(2)-Dockerfile語法使用</title>
      <link>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%982-dockerfile%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%982-dockerfile%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</guid>
      <description>Docekrfile使用觀念 常用Linux指令    MacOS / Linux 指令 說明 範例     exit 離開 exit   pwd 取得目前的路徑 pwd   ls 取得當前資料夾與檔案名稱 ls   cd 切換目錄 cd ~   touch 建立檔案 touch demo.html   mkdir 建立資料夾 mkdir demo   rm 刪除檔案 rm demo.html   cp 複製檔案 cp demo.html demo1.html   scp 在不同的 Linux 主機之間複製檔案 scp user_name@riverye.com:/home/data/考試100分.pdf ~/Desktop   mv 移動檔案 mv demo1.</description>
    </item>
    
    <item>
      <title>Docker筆記(1)-基本</title>
      <link>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%981-%E5%9F%BA%E6%9C%AC/</link>
      <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yen0304.github.io/p/docker%E7%AD%86%E8%A8%981-%E5%9F%BA%E6%9C%AC/</guid>
      <description>Docker基本 參考來源：
https://hahow.in/courses/5df27f1fa5ee510022a08500/
https://blog.csdn.net/qq_21197507/article/details/115071715
https://github.com/twtrubiks/docker-tutorial
什麼是Docker docker是一種容器化技術，問題的起源在於在多個APP在同一台主機的同一個系統上運行，只要有問題發生，所有APP會受影響，所有演變成了使用多個主機來完成（傳統模式），但這樣耗費量還是很大，所以就出現了虛擬機（VM模式），就可以達到保護功能，同時用一個主機就可以完成，但這些虛擬機在系統資源（VM、OS）的耗費量還是非常大，所以出現了Docker（容器模式），使用軟體的虛擬的空間來完成。
 
Docker三大功用  簡化部署流程  在部署運行環境時，常常要進行環境安安裝，或是安裝指令，耗時又常常出錯，Docker可以把這些用指令變成程式部署包
 跨平台部署  無論在什麼系統下使用Docker的部署包都可以運行
 建立乾淨測試環境  將測試資料、資料庫安裝、安裝指令打包成資料庫部署包
當有了城市以及資料庫部署包之後，就可以快速運行全新的環境，也可以做安靜的安裝跟清空，不用擔心有殘留檔案的問題
 
名詞解釋   鏡像（image）
映像檔，可以把它想成是以前我們在玩 VM 的 Guest OS（ 安裝在虛擬機上的作業系統 ）。
Image 是唯讀（ R\O ）
  容器（container） Docker利用容器技術，獨立運行一個或者一組應用， 通過鏡像來創建的 啟動，停止，刪除，基本命令！ 就目前可以把這個容器理解為一個建議的linux系統
  倉庫（repository） 存放鏡像(image)的地方，可以把它想成類似 GitHub，裡面存放了非常多的 Image ，可在 Docker Hub 中查看。
  安裝Docker 直接到官網無腦安裝docker-desktop（也可以安裝Docker ToolBox）：
https://www.docker.com/products/docker-desktop
確認安裝
docker --version docker-compose --version 終端機結果
➜ ~ docker --version docker-compose --version Docker version 20.</description>
    </item>
    
  </channel>
</rss>
